#! /usr/bin/python

# GPL licensed


import sys
import locale
import argparse
import json
import numpy as np
import copy
from core.coreTypes import *

locale.setlocale( locale.LC_ALL, 'en_US.UTF-8' )

def parseInputFile(inputFile, rank, rank_statistics):
    line = inputFile.readline()
    items = line.split("\t")[1:-1]

    # Remove the string decorators from paraver (if needed)
    clean_items = []
    for s in items:
        if (s.find ("[") == -1):
            if s.find ("(") != -1 and s.find (")") > s.find ("("):
                clean_items.append(s[1+s.find("("):s.find(")")])
            else:
                clean_items.append(s)
        else:
            clean_items.append(s[1+s.find("["):s.find("]")])

    if rank > 0:
        for i in range(rank): line = inputFile.readline()
    else:
        while line != "" and rank_statistics not in line: line = inputFile.readline()
    if line == "":
        print("Error, premature EOF")
        sys.exit(1)
    weights = line.split("\t")[1:-1]
    if len(items) != len(weights):
        print("Error, length mismatch")
        sys.exit(1)
    return clean_items, weights


def parseAllocInfoFile(fname):
    col_parsers = {
        'app': int,
        'proc': int,
        'func': int,
        'alloc_time': int,
        'free_time': int,
        'bytes': int,
        'obj_id': int,
    }

    with open(fname) as infile:
        data = json.load(infile)

    assert 'version' in data and data['version'] == 1

    colnames = data['fields']
    dict_allocs = []
    for a in data['allocs']:
        assert len(a) == len(colnames)
        d = {col: col_parsers.get(col, lambda x: x)(v) for col,v in zip(colnames, a)}
        dict_allocs.append(d)

    data['allocs'] = dict_allocs

    # add a reverse mapping from callstacks to numeric object IDs
    data['callstacks'] = {cs[1+cs.find("["):cs.find("]")]: int(oid) for oid,cs in data['objects'].items()}
    return data


def parseTimeslotsInfoFile(fname):
    with open(fname) as infile:
        data = json.load(infile)

    assert 'version' in data and data['version'] == 1

    field_idx = {}
    assert 'field_idx' not in data
    data['field_idx'] = field_idx
    for i,f in enumerate(data['fields']):
        field_idx[f] = i

    return data


def text2bytes(text):
    if text[-1] >= '0' and text[-1] <= '9':
        text = text + 'b'
    mult = text[-1]
    size = float(text[:-1])
    if mult not in ("b", "B"):
        if mult in ("k", "K"):
            size *= 1024
        elif mult in ("m", "M"):
            size *= 1024**2
        elif mult in ("g", "G"):
            size *= 1024**3
        elif mult in ("t", "T"):
            size *= 1024**4
        else:
            print("Error in size modifier")
            sys.exit(1)
    return int(size)


def pack_precise(items, mems, i):
    def itemSize(item): return item.size
    def itemRealSize(item): return item.realsize

    sizeLimit = mems[i].size
    getSize = itemSize
    P = {}
    for nItems in range(len(items)+1):
        for lim in range(sizeLimit+1):
            if nItems == 0:
                P[nItems,lim] = 0
            elif getSize(items[nItems-1]) > lim:
                P[nItems,lim] = P[nItems-1,lim]
            else:
                P[nItems,lim] = max(P[nItems-1,lim],
                                    P[nItems-1,lim-getSize(items[nItems-1])] +
                                    items[nItems-1].value[i])

    L = []
    nItems = len(items)
    lim = sizeLimit
    while nItems > 0:
        nItems -= 1
        if P[nItems+1,lim] != P[nItems,lim]:
            L.append(items[nItems])
            lim -= getSize(items[nItems])

    return L


def pack_greedy(items, mems, i):
    sizeLimit = mems[i].size
    items.sort(key=lambda x: x.value[i], reverse = True)
    L = []
    for item in items:
        if item.size <= sizeLimit:
            L.append(item)
            sizeLimit -= item.size
            if sizeLimit == 0: break
    return L


def pack_number(items, mems, i, lim):
    sizeLimit = mems[i].size
    L = []

    for item in items:
        if item.size <= sizeLimit and item.value[i] >= lim:
            print(item.value, lim)
            L.append(item)
            sizeLimit -= item.size
            if sizeLimit == 0: break
    return L


def print_distribution(distribution, systems, bytes):
    for j in range(len(systems)):
        print("System: ",j, " Objects: ",len(distribution[j]))
        for item in distribution[j]:
            print("Id: ",item.id, " Loads: ",item.loads, " Stores: ",item.stores, " Cost:", item.value)
        print("Occupancy: ", bytes[j] * 100 / systems[j].realsize)


def weight_objects(objects, systems, algorithm, metric, worst):
    if metric == "misses":
        for item in objects:
            item.value = [(item.loads + item.stores) / float(item.size)] * (len(systems)-1)
    elif metric == "latencies":
        for item in objects:
            item.value = [0] * (len(systems)-1)
            for i in range(len(systems)-1):
                item.value[i] = (item.loads * systems[i+1].load_latency + item.stores * systems[i+1].store_latency) / float(item.size)

    if algorithm.isdigit():
        tot = 0
        for item in objects:
            tot += item.value[0]
        for item in objects:
            item.value[0] = item.value[0] * 100 / tot

    # Be bad?
    if worst:
        max_value = 0
        for i in range(len(systems)-1):
            for item in objects:
                if item.value[i] > max_value: max_value = item.value[i]
            max_value += 1
            for item in objects:
                item.value[i] = max_value - item.value[i]


def get_distribution(objects, systems, algorithm, metric):
    distribution = [None] * len(systems)

    new_objects = [obj for obj in objects]

    for i in range(len(systems)-1):
        if algorithm == "precise":
            distribution[i] = pack_precise(new_objects, systems, i)
        elif algorithm == "greedy":
            distribution[i] = pack_greedy(new_objects, systems, i)
        elif algorithm.isdigit():
            distribution[i] = pack_number(new_objects, systems, i, float(algorithm))
        new_objects[:] = [item for item in new_objects if item not in distribution[i]]
    size = 0
    for o in new_objects: size += o.size
    if size > systems[-1].size:
        print("Error, doesn't fit")
        sys.exit(1)
    distribution[-1] = new_objects

    for placement in distribution:
        placement.sort(key=lambda x: x.callstack)

    return distribution


def fit_extra_objects(distribution, systems, allocs_info, app, proc, conc_activity_objs):
    def get_obj_id(memobj):
        if memobj.id != -1:
            return memobj.id
        return allocs_info['callstacks'].get(memobj.callstack, -1)

    dram_idx = [i for i,s in enumerate(systems) if s.name == 'DRAM'][0]
    selected_oids = [get_obj_id(o) for o in distribution[dram_idx]]

    num_procs = len(set(a['proc'] for a in allocs_info['allocs']))
    limit = systems[dram_idx].realsize / float(num_procs)

    assert len(selected_oids) == len(set(selected_oids)), "dups in selected_oids"

    # Group allocs (of selected app,proc) by object ID, as (timestamp, bytes delta) pairs
    objs = {}
    for alloc in allocs_info['allocs']:
        if alloc['app'] != app or alloc['proc'] != proc:
            continue
        # discard allocs with invalid free time
        if alloc['free_time'] <= alloc['alloc_time']:
            continue

        obj_deltas = objs.setdefault(alloc['obj_id'], [])

        obj_deltas.append((alloc['alloc_time'], alloc['bytes']))
        obj_deltas.append((alloc['free_time'], -1 * alloc['bytes']))

    # Convert lists of (time, bytes delta) to two numpy arrays, sorted by time
    np_objs = {}
    for obj_id in sorted(objs):
        if obj_id < 0:
            continue

        # merge deltas that have the same timestamp (realloc frees prev and allocates next in the same timestamp)
        deltas = {}
        for time,delta in objs[obj_id]:
            if time not in deltas:
                deltas[time] = 0
            deltas[time] += delta

        sorted_times = list(sorted(deltas.keys()))

        assert obj_id not in np_objs
        np_objs[obj_id] = {}
        np_objs[obj_id]['time'] = np.asarray(sorted_times)
        np_objs[obj_id]['bytes_delta'] = np.asarray([deltas[t] for t in sorted_times])

        # check that byte deltas are balanced
        assert np_objs[obj_id]['bytes_delta'].sum() == 0

    # merge
    merged_time = np.asarray([])
    for o in np_objs.values():
        merged_time = np.union1d(merged_time, o['time'])

    merged_values = np.zeros((len(np_objs), len(merged_time)))

    for i,oid in enumerate(sorted(np_objs.keys())):
        o = np_objs[oid]
        idxs = np.isin(merged_time, o['time']).nonzero()
        merged_values[i][idxs] = o['bytes_delta']

    #

    obj_ids = list(sorted(np_objs.keys()))


    sel_oids_in_objs = [x for x in selected_oids if x in obj_ids]

    idxs_sel_objs = list(sorted(obj_ids.index(x) for x in sel_oids_in_objs))

    stacked_values = np.cumsum(merged_values, axis=1) # turn byte-deltas to actual count, per object

    sel_values = stacked_values[idxs_sel_objs][:]
    total = np.sum(sel_values, axis=0)

    obj_values = {get_obj_id(o): o.value[0] for objs in distribution for o in objs}

    fits = []
    dont_fit = []

    # iterate over remaining objects sorted by descending cost
    sorted_np_objs = list(sorted(np_objs.keys(), key=lambda x: obj_values.get(x, 0.), reverse=True))
    # if we have high concurrent activity objects information, put them first
    if conc_activity_objs is not None:
        sorted_np_objs = [oid for oid in sorted_np_objs if oid in conc_activity_objs] + [oid for oid in sorted_np_objs if oid not in conc_activity_objs]
        assert len(sorted_np_objs) == len(np_objs)
        assert len(sorted_np_objs) == len(set(sorted_np_objs))

    for oid in sorted_np_objs:
        if oid in selected_oids:
            continue
        idx = obj_ids.index(oid)

        new_total = stacked_values[idx] + total
        if new_total.max() <= limit:
            fits.append(oid)
            total = new_total
        else:
            dont_fit.append(oid)

    objs_in_fits = [(memidx, o) for memidx,objs in enumerate(distribution) for o in objs if get_obj_id(o) in fits]
    for memidx,obj in objs_in_fits:
        assert memidx != dram_idx
        distribution[dram_idx].append(obj)
        distribution[memidx].remove(obj)


def bw_aware_replacement(distribution, systems, allocs_info):
    debug_bw_centric_allocation = False
    def dbg(*args):
        if debug_bw_centric_allocation:
            print('DEBUG', *args)

    tagged_objects = {}

    for level in range(len(systems)):
        for item in distribution[level]:
            if item.callstack in allocs_info['callstacks']:
                item.id = allocs_info['callstacks'][item.callstack]

        # Items out of advisor
        if level not in tagged_objects:
            tagged_objects[level] = {}
        for item in distribution[level]:
            tagged_objects[level][item.id] = MemoryObject(item.callstack, item.loads, item.stores, item.realsize, item.ecu, item.id, item.value[0])
            dbg(item.id, item.callstack, item.value)

    count = 0
    for e in allocs_info['allocs']:
        found = 0
        for level in range(len(systems)):
            if e['obj_id'] in tagged_objects[level]:
                e['loads'] = tagged_objects[level][e['obj_id']].loads
                e['stores'] = tagged_objects[level][e['obj_id']].stores
                e['callstack'] = tagged_objects[level][e['obj_id']].callstack
                e['level'] = level
                e['value'] = tagged_objects[level][e['obj_id']].value
                found = 1;
                count += 1
                break;

        if found == 0:
            e['loads'] = 0
            e['stores'] =0
            e['callstack'] = 'Unknown'
            e['level'] = 'Unknown'

    obj_instances = {}

    for e in allocs_info['allocs']:
        if e['level'] == 0 or e['level'] == 1:
            if e['obj_id'] not in obj_instances:
               obj_instances[e['obj_id']] = {'total_inst':1, 'inst':1, 'end':e['free_time']}
            else:
                obj_instances[e['obj_id']]['total_inst'] += 1

                if e['alloc_time'] < obj_instances[e['obj_id']]['end']:
                    obj_instances[e['obj_id']]['inst'] += 1
                    obj_instances[e['obj_id']]['end'] = e['free_time']
                else:
                    obj_instances[e['obj_id']]['inst'] = 1
                    obj_instances[e['obj_id']]['end'] = e['free_time']


    dbg("Object instances: ", obj_instances)

    e1 = {}

    new_info = []
    for e in allocs_info['allocs']:
        e['event'] = 1
        e['inst'] = 0
        e['event_time'] = e['alloc_time']
        e['fitting'] = 0
        e['thrashing'] = 0
        e['delta'] = 0
        e['streaming'] = 0
        e['high_bw_alloc'] = 0
        e['dram_bw'] = 0
        e['pmem_bw'] = 0
        e['alive'] = (e['free_time'] - e['alloc_time']) / 10**9
        e['avail'] = {}

        e['loadfreq'] = (float(e['loads']) * 10**12) / (int(e['free_time']) - int(e['alloc_time'])) if e['loads'] else 0
        e['storefreq'] = (float(e['stores']) * 10**12) / (int(e['free_time']) - int(e['alloc_time'])) if e['stores'] else 0

        e1 = e.copy()
        e1['event'] = 0
        e1['event_time'] = e['free_time'];
        e1['ref'] = e

        new_info.append(e1)


    for e in new_info:
        allocs_info['allocs'].append(e)

    dram_size = 0
    pmem_size = 0

    dram_objects = []
    pmem_objects = []

    Th_R    = 100000
    Th_R_L  = 30000
    Th_R_LL = 20000
    Th_R_LH = 50000
    Th_S = 20
    Th_SL = 10
    Th_W = 200
    Th_L = 2

    Th_RWB = Th_S * Th_R
    Th_D_RWB = Th_SL * Th_R

    DRAM_TH=2*1024*1024*1024
    target_objects = []
    replacement_objects = []
    replacement_size = []
    obj_dram_overflow = {}
    obj_dram_all = {}
    obj_pmem_all = {}
    obj_dram_active = {}

    dram_load_bw  = 0
    dram_store_bw = 0
    pmem_load_bw  = 0
    pmem_store_bw = 0

    for e in sorted(allocs_info['allocs'], key=lambda x: x['event_time']):
        cur_time = e['event_time']
        oid = e['obj_id']

        if e['level'] == 0:
            if oid not in obj_dram_all:
                obj_dram_all[oid] = 0
            obj_dram_all[oid] += 1

        if e['level'] == 1:
            if oid not in obj_pmem_all:
                obj_pmem_all[oid] = 0
            obj_pmem_all[oid] += 1

        if e['app'] == 1 and e['proc'] == 1 and e['event'] == 1:
            if e['level'] == 0: # If allocated to DRAM
                dram_size += e['bytes']
                dram_objects.append(e)

                if oid not in obj_dram_active:
                    obj_dram_active[oid] = 0
                obj_dram_active[oid] += 1

                if e['loadfreq']:
                    load_bw = e['loadfreq']
                    dram_load_bw += load_bw

                if e['storefreq']:
                    store_bw = e['storefreq']
                    dram_store_bw += store_bw

                e['dram_bw'] = dram_load_bw
                e['pmem_bw'] = pmem_load_bw

                if e['loadfreq'] >= Th_RWB:
                    e['high_bw_alloc'] = 1

                if int(dram_size) > DRAM_TH and oid not in obj_dram_overflow:
                    obj_dram_overflow[oid] = 1
                    e['fitting'] = 0
                    e['thrashing'] = 1
                else:
                    if oid in obj_dram_overflow:
                        obj_dram_overflow[oid] += 1
                        e['fitting'] = 0
                        e['thrashing'] += 1

                    else:
                        e['fitting'] = 1

                        if oid in obj_instances :
                            if obj_instances[oid]['total_inst'] > Th_L or obj_instances[oid]['inst'] > Th_L:
                                e['streaming'] = 1

            else: # If allocated to PMEM
                if e['level'] != 'Unknown':
                    pmem_size += e['bytes']
                    pmem_objects.append(e)

                if int(dram_size) + int(e['bytes']) > DRAM_TH:
                    e['thrashing'] = 1

                    if dram_size < DRAM_TH:
                        e['delta'] = int(e['bytes']) - (DRAM_TH - dram_size)
                    else:
                        e['delta'] = 0

                if e['loadfreq']:
                    load_bw = e['loadfreq']
                    pmem_load_bw += load_bw

                if e['storefreq']:
                    store_bw = e['storefreq']
                    pmem_store_bw += store_bw

                e['dram_bw'] = dram_load_bw
                e['pmem_bw'] = pmem_load_bw

                if e['loadfreq'] >= Th_D_RWB:
                    e['high_bw_alloc'] = 1

                if oid in obj_instances :
                    if obj_instances[oid]['total_inst'] > Th_L or obj_instances[oid]['inst'] > Th_L:
                        e['streaming'] = 1
        else:
            if e['app'] == 1 and e['proc'] == 1 and e['event'] == 0:
                if e['level'] == 0:
                    dram_size -= e['bytes']

                    if oid in obj_dram_active and obj_dram_active[oid] > 0:
                        obj_dram_active[oid] -= 1

                    if dram_load_bw:
                        dram_load_bw -= e['loadfreq']

                    if dram_store_bw:
                        dram_store_bw -= e['storefreq']
                else:
                    if e['level'] != 'Unknown':
                        pmem_size -= e['bytes']

                    if pmem_load_bw:
                        pmem_load_bw -= e['loadfreq']

                    if pmem_store_bw:
                        pmem_store_bw -= e['storefreq']


        if debug_bw_centric_allocation:
            if (e['loads'] != 0 or e['stores'] != 0) and e['event'] == 1 and e['app'] == 1 and e['proc'] == 1:
                if e['level'] == 0:
                    obj_inst = {}
                    if oid not in obj_inst:
                        obj_inst[oid] = 0
                    obj_inst[oid] += 1

                    print(("A1 Objs:" + str(len(dram_objects)) + " " + str(len(pmem_objects))
                        + " BW:" + str(dram_load_bw) + " " + str(dram_store_bw) + " " + str(pmem_load_bw) + " " + str(pmem_store_bw)
                        + "PID: (" + str(e['app']) +  " " + str(e['proc']) + ") OBJ:" + str(oid) + " INST:(" + str(obj_inst[oid]) + ") "
                        + systems[e['level']].name + " " + str(e['event']) + " " + str(e['event_time']) + " " + str(e['free_time']) + " "
                        + str(e['alive']) + " " + str(e['bytes']) + " " + str(e['loads']) + " " + str(e['stores']) + " " + str(dram_size) + " " + str(pmem_size))
                        + "; Freq: " + str(e['loadfreq']) + " " + str(e['storefreq']) + "{inst:" + str(obj_dram_active[oid]) + " fitting:" + str(e['fitting'])
                        + " thrashing:" + str(e["thrashing"]) + " streaming:" + str(e["streaming"]) + " bandwidth:" + str(e["high_bw_alloc"]) + "}")

                elif e['level'] == 1:
                    print(("B1 Objs:" + " BW:" + str(dram_load_bw) + " " + str(dram_store_bw) + " " + str(pmem_load_bw) + " " + str(pmem_store_bw)
                        + "OBJ:" + str(oid) + " " + systems[e['level']].name + " " + str(e['event']) + " " + str(e['event_time']) + " " + str(e['free_time']) + " "
                        + str(e['alive']) + " " + str(e['bytes']) + " " + str(e['loads']) + " " + str(e['stores']) + " " + str(dram_size) + " " + str(pmem_size))
                        + "; Freq: " + str(e['loadfreq']) + " " + str(e['storefreq']) + "{fitting:" + str(e['fitting']) + " thrashing:" + str(e["thrashing"])
                        + " streaming:" + str(e["streaming"]) + " bandwidth:" + str(e["high_bw_alloc"]) + "}")


    fit_size = 0
    dram_replacement = {}
    pmem_move = {}

    #TODO Take bandwidth calculation into account
    for do in dram_objects:
        oid = do['obj_id']
        if do['fitting'] == 1 and do['pmem_bw'] < Th_R_L:
            if do['bytes'] >= fit_size:
                fit_size = do['bytes']

            if oid not in dram_replacement:
                dram_replacement[oid] = {}
                dram_replacement[oid]['alloc'] = do['event_time']
                dram_replacement[oid]['free']  = do['free_time']
                dram_replacement[oid]['bytes'] = do['bytes']
                dram_replacement[oid]['loads'] = do['loads']
                dram_replacement[oid]['stores'] = do['stores']
                dram_replacement[oid]['total_instances'] = obj_instances[oid]['total_inst']
                dram_replacement[oid]['instances'] = obj_instances[oid]['inst']
                dram_replacement[oid]['avail'] = {}
                dram_replacement[oid]['done'] = False
                dram_replacement[oid]['secondchance'] = False

            if do['streaming'] == 1 and do['high_bw_alloc'] == 1 and do['stores'] == 0:
                if oid not in pmem_move:
                    pmem_move[oid] = 1

    pmem_replacement = {}

    dram_move = {}

    for do in pmem_objects:
        oid = do['obj_id']
        if oid not in pmem_replacement and ((do['thrashing'] == 1 and do['pmem_bw'] > Th_R_L) or (do['loads'] > 0 and do['pmem_bw'] > Th_R) or (do['loads'] > 0 and do['stores'] > 0 and do['pmem_bw'] > Th_R_LL)):
            pmem_replacement[oid] = {}
            pmem_replacement[oid]['alloc'] = do['event_time']
            pmem_replacement[oid]['free']  = do['free_time']
            pmem_replacement[oid]['bytes'] = do['bytes']
            pmem_replacement[oid]['loads'] = do['loads']
            pmem_replacement[oid]['stores'] = do['stores']
            pmem_replacement[oid]['total_instances'] = obj_instances[oid]['total_inst']
            pmem_replacement[oid]['instances'] = obj_instances[oid]['inst']
            pmem_replacement[oid]['delta'] = do['delta']
            pmem_replacement[oid]['avail'] = {}
            pmem_replacement[oid]['done'] = False
            pmem_replacement[oid]['secondchance'] = False
            pmem_replacement[oid]['futuresize'] = 0

        if do['streaming'] == 1 and do['high_bw_alloc'] == 1 and do['stores'] == 0:
            if oid not in dram_move:
                pmem_replacement[oid] = {}
                pmem_replacement[oid]['alloc'] = do['event_time']
                pmem_replacement[oid]['free']  = do['free_time']
                pmem_replacement[oid]['bytes'] = do['bytes']
                pmem_replacement[oid]['loads'] = do['loads']
                pmem_replacement[oid]['stores'] = do['stores']
                pmem_replacement[oid]['total_instances'] = obj_instances[oid]['total_inst']
                pmem_replacement[oid]['instances'] = obj_instances[oid]['inst']
                pmem_replacement[oid]['delta'] = do['delta']
                pmem_replacement[oid]['avail'] = {}
                pmem_replacement[oid]['done'] = False
                pmem_replacement[oid]['secondchance'] = False
                pmem_replacement[oid]['futuresize'] = 0

    # BEGIN DEBUG
    if debug_bw_centric_allocation:
        print(len(dram_objects))
        print(len(pmem_objects))
        print()

        fit_size = 0
        print("These fit in DRAM")
        dram_replacement_debug = {}
        for do in dram_objects:
            oid = do['obj_id']
            if do['fitting'] == 1 and do['pmem_bw'] < Th_R_L:
                if do['bytes'] >= fit_size:
                    fit_size = do['bytes']

                if oid not in dram_replacement_debug:
                    dram_replacement_debug[oid] = {}
                    dram_replacement_debug[oid]['alloc'] = do['event_time']
                    dram_replacement_debug[oid]['free']  = do['free_time']
                    dram_replacement_debug[oid]['bytes'] = do['bytes']
                    dram_replacement_debug[oid]['loads'] = do['loads']
                    dram_replacement_debug[oid]['stores'] = do['stores']
                    dram_replacement_debug[oid]['total_instances'] = obj_instances[oid]['total_inst']
                    dram_replacement_debug[oid]['instances'] = obj_instances[oid]['inst']

        for do in dram_replacement_debug:
            print(do, "SIZE:", dram_replacement_debug[do]['bytes'], "ALLOC:", dram_replacement_debug[do]['alloc'], "FREE:", dram_replacement_debug[do]['free'], "INST:", dram_replacement_debug[do]["instances"], dram_replacement_debug[do]["total_instances"], "LOADS:", dram_replacement_debug[do]['loads'], "STORES:", dram_replacement_debug[do]['stores'])
        #print(dram_replacement)
        print("Fit size", fit_size)
        print("These out of", len(pmem_objects), "goto PMEM")

        pmem_replacement_debug = {}
        for do in pmem_objects:
            oid = do['obj_id']
            if oid not in pmem_replacement_debug and ((do['thrashing'] == 1 and do['pmem_bw'] > Th_R_L) or (do['loads'] > 0 and do['pmem_bw'] > Th_R) or (do['loads'] > 0 and do['stores'] > 0 and do['pmem_bw'] > Th_R_LL)):
                pmem_replacement_debug[oid] = {}
                pmem_replacement_debug[oid]['alloc'] = do['event_time']
                pmem_replacement_debug[oid]['free']  = do['free_time']
                pmem_replacement_debug[oid]['bytes'] = do['bytes']
                pmem_replacement_debug[oid]['loads'] = do['loads']
                pmem_replacement_debug[oid]['stores'] = do['stores']
                pmem_replacement_debug[oid]['pmem_bw'] = do['pmem_bw']
                pmem_replacement_debug[oid]['total_instances'] = obj_instances[oid]['total_inst']
                pmem_replacement_debug[oid]['instances'] = obj_instances[oid]['inst']
                pmem_replacement_debug[oid]['delta'] = do['delta']

            else:
                if oid in pmem_replacement_debug:
                   pmem_replacement_debug[oid]['free'] = do['free_time']

        for do in pmem_replacement_debug:
            print(do, "SIZE:", pmem_replacement_debug[do]['bytes'], "ALLOC:", pmem_replacement_debug[do]['alloc'], "FREE:", pmem_replacement_debug[do]['free'], "INST:", pmem_replacement_debug[do]["instances"], pmem_replacement_debug[do]["total_instances"], "LOADS:", pmem_replacement_debug[do]['loads'], "STORES:", pmem_replacement_debug[do]['stores'], "PMEM BW:", pmem_replacement_debug[do]['pmem_bw'], "DELTA:", pmem_replacement_debug[do]['delta'])

        print()
        print(target_objects)
        print(replacement_objects)
        print(replacement_size)
        print(obj_dram_overflow)
        print(obj_dram_all)
        print(obj_pmem_all)

        print("PMEM Replacement" )
        print(sorted(pmem_replacement, key=lambda x:pmem_replacement[x]['stores'], reverse=True))
        print("DRAM Replacement" )
        print(sorted(dram_replacement, key=lambda x:dram_replacement[x]['stores'], reverse=True))
    # END DEBUG


    # Algo for replacement candidate
    alloc_time_line = []

    for mo in pmem_replacement:
        alloc_time_line.append(pmem_replacement[mo]['alloc'])

    for mo in dram_replacement:
        for time in alloc_time_line:
            if time >= dram_replacement[mo]['alloc'] and time <= dram_replacement[mo]['free']:
                dram_replacement[mo]['avail'][time] = dram_replacement[mo]['bytes']

    avail_dram = {}
    for time in alloc_time_line:
        avail_dram[time] = 0
        for mo in dram_replacement:
            if time in dram_replacement[mo]['avail']:
                avail_dram[time] += dram_replacement[mo]['avail'][time]

    dram_replacement_id = []
    pmem_replacement_id = []
    second_chance_replacement = []

    for pmem_id in sorted(pmem_replacement, key=lambda x:pmem_replacement[x]['stores'], reverse=True):
        dbg(pmem_replacement[pmem_id]['alloc'])

        for dram_id in dram_replacement:
            if dram_replacement[dram_id]['done'] == False and pmem_replacement[pmem_id]['alloc'] in dram_replacement[dram_id]['avail']:
                if dram_replacement[dram_id]['avail'][pmem_replacement[pmem_id]['alloc']] >= pmem_replacement[pmem_id]['bytes']:
                    dbg("Found", dram_id, "for", pmem_id, "allocation size", pmem_replacement[pmem_id]['bytes'])

                    dram_replacement_id.append(dram_id)
                    pmem_replacement_id.append(pmem_id)
                    dram_replacement[dram_id]['done'] = True
                    dram_replacement[dram_id]['avail'][pmem_replacement[pmem_id]['alloc']] -= pmem_replacement[pmem_id]['bytes']
                    dram_replacement[dram_id]['bytes'] -= pmem_replacement[pmem_id]['bytes']
                    break
                else:
                    pmem_replacement[pmem_id]['secondchance'] = True
            else:
                if dram_replacement[dram_id]['done'] == True and dram_replacement[dram_id]['bytes'] > 0:
                    pmem_replacement[pmem_id]['secondchance'] = True
                    pmem_replacement[pmem_id]['delta'] = pmem_replacement[pmem_id]['bytes']


    dbg("DRAM objects available for second chance")

    for pmem_id in sorted(pmem_replacement, key=lambda x:pmem_replacement[x]['stores'], reverse=True):
        if pmem_replacement[pmem_id]['done'] == False and pmem_replacement[pmem_id]['secondchance'] == True and pmem_replacement[pmem_id]['delta'] > 0:
            for dram_id in dram_replacement:
                if pmem_replacement[pmem_id]['alloc'] in dram_replacement[dram_id]['avail'] and dram_replacement[dram_id]['bytes'] > 0:
                    if (dram_replacement[dram_id]['bytes'] * obj_instances[dram_id]['total_inst']) >= pmem_replacement[pmem_id]['delta']:
                        dbg("OBJ:", dram_id, "will be looked for the next chance Pmem size:", pmem_replacement[pmem_id]['delta'], "ID:", pmem_id, "DRAM size", dram_replacement[dram_id]['bytes'] * obj_instances[dram_id]['total_inst'], "bytes")

                        if dram_replacement[dram_id]['bytes'] < pmem_replacement[pmem_id]['delta'] * obj_instances[pmem_id]['total_inst']:
                            dram_replacement[dram_id]['bytes'] = 0
                        else:
                            dram_replacement[dram_id]['bytes'] -= pmem_replacement[pmem_id]['delta']/obj_instances[dram_id]['total_inst']

                        if pmem_id not in second_chance_replacement:
                            pmem_replacement_id.append(pmem_id)

    avail_dram = {}
    for time in alloc_time_line:
        avail_dram[time] = 0
        for mo in dram_replacement:
            if time in dram_replacement[mo]['avail']:
                avail_dram[time] += dram_replacement[mo]['avail'][time]

    # Place objects around DRAM and PMEM
    dram_replaced_obj = []

    dbg(dram_replacement_id)

    for mo in distribution[0]:
        if mo.id in dram_replacement_id:
            dram_replaced_obj.append(mo)

        # If object is to moved to pmem
        if mo.id in pmem_move:
            dram_replaced_obj.append(mo)

    for mo in dram_replaced_obj:
        mo_1 = copy.deepcopy(mo)
        distribution[0].remove(mo)
        distribution[1].append(mo_1)

    pmem_replaced_obj = []

    dbg(pmem_replacement_id)
    dbg(dram_move)

    for mo in distribution[1]:
        if mo.id in pmem_replacement_id:
            pmem_replaced_obj.append(mo)

        # If object is to moved to dram
        if mo.id in dram_move:
            pmem_replaced_obj.append(mo)

    for mo in pmem_replaced_obj:
        mo_1 = copy.deepcopy(mo)

        if mo in distribution[1]:
            distribution[1].remove(mo)
        distribution[0].append(mo_1)



def main():
    parser = argparse.ArgumentParser(description='hmem_advisor, a memory object distribution tool for heterogeneous memory systems')
    #parser.add_argument('mem_config', type=str)
    #parser.add_argument('accesses_loads', type=argparse.FileType('rU'))
    #parser.add_argument('sizes', type=argparse.FileType('rU'))
    parser.add_argument('--mem-config', type=str, required=True)
    parser.add_argument('--loads', type=argparse.FileType('rU'), required=True)
    parser.add_argument('--sizes', type=argparse.FileType('rU'), required=True)
    parser.add_argument('--stores', type=argparse.FileType('rU'))
    parser.add_argument('--worst', action='store_true', default=False)
    parser.add_argument('--algo', type=str, default='greedy')
    parser.add_argument('--metric', type=str, default='latencies', choices=('latencies','misses'))
    parser.add_argument('--page', type=str, required=False, default="4096b")
    parser.add_argument('--verbose', action='store_true', default=False)
    parser.add_argument('--rank', type=int, default=0)
    parser.add_argument('--rank-statistics', type=str, default="Total")
    parser.add_argument('--visualizer', action='store_true', default=False)
    parser.add_argument('--allocs-info')
    parser.add_argument('--num-ranks', type=int)
    parser.add_argument('--disable-bw-aware', action='store_true', default=False)
    args = parser.parse_args()

    # Sanity checks
    if args.algo not in ("greedy", "precise") and not args.algo.isdigit():
        print("Algorithm", args.algo, "not supported")
        sys.exit(1)
    if args.algo.isdigit() and len(systems) > 2:
        print("Algorithm", args.algo, "only supported with 2 memory subsystems;", len(systems), "given")
        sys.exit(1)
    if not args.disable_bw_aware and not args.allocs_info:
        print('The bw-aware placement requires allocs-info data')
        sys.exit(1)
    if args.rank_statistics == 'Average' and not args.num_ranks:
        print('For --rank-statistics=Average you also have to specify --num-ranks')
        sys.exit(1)

    if args.verbose:
        print("hmem_advisor, a memory object distribution tool for heterogeneous memory systems")
        print("Copyright (C) 2019-2021 Barcelona Supercomputing Center (BSC)")
        print("Author: Antonio J. Pena <antonio.pena@bsc.es>")
        print("With contributions from Muhammad Owais, Marc Jorda and Siddharth Rai")
        print("Based on original 'dmem_advisor' from Antonio J. Pena, Argonne National Laboratory")
        print()

    objects = []
    useless = []
    ignored = []
    systems = []
    pagesize = text2bytes(args.page)

    # Mem Config
    with open(args.mem_config, 'rU') as fmem_config:
        lines = fmem_config.readlines()

    for line in lines:
        if line[-1] == "\n":
            line = line[:-1]
        fields = line.split(",")
        name = fields[0]
        load_latency = int(fields[1])
        store_latency = int(fields[2])
        size = text2bytes(fields[3])
        if args.rank_statistics == 'Average':
            size = size / args.num_ranks
        allocator = fields[4]
        systems.append(MemorySystem(name, load_latency, store_latency, size, allocator, pagesize))
        if name == "DRAM":
            dram = systems[-1]

    # Input from loads
    items_loads, weights_loads = parseInputFile(args.loads, args.rank, args.rank_statistics)

    # Input from stores
    items_stores = []
    weights_stores = []
    if args.stores:
        items_stores, weights_stores = parseInputFile(args.stores, args.rank, args.rank_statistics)

    # Input from sizes
    items_sizes, sizes = parseInputFile(args.sizes, args.rank, args.rank_statistics)

    # Input from avg. latencies
    #if args.lats:
    #    items_latencies, latencies = parseInputFile(args.lats, args.rank, args.rank_statistics)

    # Remove objects with 0-size
    toremove = []
    for i,itm in enumerate(items_sizes):
        if float(sizes[i]) == 0.0:
            toremove.append(i)

    # Remove in reverse order, otherwise indices get corrupted/broken as they move
    for i in reversed(toremove):
        if args.stores:
            del items_stores[i]
            del weights_stores[i]
    #    if args.lats:
    #        del items_latencies[i]
    #        del latencies[i]
        del items_sizes[i]
        del sizes[i]
        del items_loads[i]
        del weights_loads[i]

    check_equal = False
    if args.stores:
        check_equal = ( len(items_loads) == len(items_stores) == len(items_sizes) )
    else:
        check_equal = len(items_loads) == len(items_sizes)
    if not check_equal:
        print("Error: Items are not same across loads,stores,sizes")
        sys.exit(1)


    max_loads = 0
    max_stores = 0
    totv_loads = 0
    totv_stores = 0
    tot_size = 0


    # build object store, not assuming items are sorted across loads, stores, sizes
    # i.e. items_loads[i] doesn't necessarily correspond to items_sizes[i]
    # using items in loads data as key across sizes and stores
    for i in range(len(items_loads)):
        callstack = items_loads[i]
        loads = int(float(weights_loads[i]))
        stores = 0
        size = 0
        try:
            idx = items_sizes.index(items_loads[i])
            size = int(float(sizes[idx]))
        except:
            size = 0
        if args.stores:
            try:
                idx = items_stores.index(items_loads[i])
                stores = int(float(weights_stores[idx]))
            except:
                stores = 0
        if not callstack == "Unresolved" and callstack.find("Memory object referenced by sampled address") == -1:
            if (loads > 0 or stores > 0) and size > 0:
                if loads > max_loads: max_loads = loads
                if stores > max_stores: max_stores = stores
                totv_loads += loads
                totv_stores += stores
                tot_size += size
                objects.append(MemoryObject(callstack, loads, stores, size, pagesize))
            else:
                useless.append(MemoryObject(callstack, loads, stores, size, pagesize))
        else:
            ignored.append(MemoryObject(callstack, loads, stores, size, pagesize))


    # Run!
    weight_objects(objects, systems, args.algo, args.metric, args.worst)
    distribution = get_distribution(objects, systems, args.algo, args.metric)


    if args.allocs_info:
        process = 10
        allocs_info = parseAllocInfoFile(args.allocs_info)
        ca_objs = None

        fit_extra_objects(distribution, systems, allocs_info, 1, process, ca_objs)
        if not args.disable_bw_aware:
            bw_aware_replacement(distribution, systems, allocs_info)


    # print output
    for i in range(len(systems)):
        size = 0
        if args.verbose:
            print("--", systems[i].name, "-", systems[i].realsize, "bytes --")

        if not args.verbose and not args.visualizer:
            print("# Memory configuration for", systems[i].name, "with size", systems[i].realsize, "bytes")
            # print("# Memory configuration for", systems[i].name, "with size", systems[i].realsize, "bytes and latency", dram.load_latency/systems[i].load_latency, "times faster than DRAM")

        for mo in distribution[i]:
            if not args.verbose:
                if args.visualizer:
                    print(mo.callstack + ';' + str(mo.realsize) + ';' + str(mo.loads))
                else:
                    print(mo.comment() + mo.callstack + " @ " + systems[i].allocator)
            elif args.stores:
                print(mo.callstack, "-", mo.loads, "loads -", mo.stores, "stores -", mo.realsize, "bytes", " - cost ", str(mo.value))
            else:
                print(mo.callstack, "-", mo.loads, "loads -", mo.realsize, "bytes", " - cost ", str(mo.value))
            size += mo.realsize
        if args.verbose:
            print("--")
            if not args.stores:
                print(len(distribution[i]), "objects;", size, "bytes (" + str(size*100./systems[i].realsize) + "%);")
            else:
                print(len(distribution[i]), "objects;", size, "bytes (" + str(size*100./systems[i].realsize) + "%);")
            print


    if not args.verbose: sys.exit(0)

    print("-- WHEREVER --")
    size = 0
    for mo in useless:
        if args.stores:
            print(mo.callstack, "-", mo.loads, "loads -", mo.stores, "stores -", mo.realsize, "bytes")
        else:
            print(mo.callstack, "-", mo.loads, "loads -", mo.realsize, "bytes")
        size += mo.realsize
    print("--")
    print(len(useless), "objects;", size, "bytes")


if __name__ == '__main__':
    main()

