#!/usr/bin/python

import sys
import argparse

from core.core_types import *
from core.parser import Parser
from core.engine import Engine, fit_extra_objects

from core.writer import write_result

from misc.bw_aware import bw_aware_replacement
from misc.utils import text2bytes


def build_objects(loads_raw_obj, stores_raw_obj, sizes_raw_obj, pagesize):
    objects = []
    ignored = []
    useless = []

    items_loads = loads_raw_obj.items
    weights_loads = loads_raw_obj.misses
    items_sizes = sizes_raw_obj.items
    weights_sizes = sizes_raw_obj.sizes
    items_stores = stores_raw_obj.items
    weights_stores = stores_raw_obj.misses

    max_loads = 0
    max_stores = 0
    totv_loads = 0
    totv_stores = 0
    tot_size = 0

    # build object store, not assuming items are sorted across loads, stores, sizes
    # i.e. items_loads[i] doesn't necessarily correspond to items_sizes[i]
    # using items in loads data as key across sizes and stores
    for i in range(len(items_loads)):
        callstack = items_loads[i]
        loads = int(float(weights_loads[i]))
        stores = 0
        size = 0
        try:
           idx = items_sizes.index(items_loads[i])
           size = int(float(weights_sizes[idx]))
        except:
           size = 0
        if stores_raw_obj.file_handler:
           try:
              idx = items_stores.index(items_loads[i])
              stores = int(float(weights_stores[idx]))
           except:
              stores = 0
        if not callstack == "Unresolved" and callstack.find("Memory object referenced by sampled address") == -1:
           if (loads > 0 or stores > 0) and size > 0:
               if loads > max_loads:
                  max_loads = loads
               if stores > max_stores:
                  max_stores = stores
               totv_loads += loads
               totv_stores += stores
               tot_size += size

               objects.append(MemoryObject(callstack, loads, stores, size, pagesize)
)
           else:
               useless.append(MemoryObject(callstack, loads, stores, size, pagesize)
)
        else:
            ignored.append(MemoryObject(callstack, loads, stores, size, pagesize))

    return objects, ignored, useless


def pipeline(args):
    parser = Parser(args)
    parser.parseInputFiles()

    pagesize = text2bytes(args.page)
    objects, ignored, useless = build_objects(parser.loads_raw_obj, parser.stores_raw_obj, parser.sizes_raw_obj, pagesize)

    mem_systems = parser.mem_systems

    engine = Engine(mem_systems, args.algo, args.metric, args.worst)
    distribution = engine.distribute_objects(objects)

    if args.allocs_info:
        process = 10
        ca_objs = None
        fit_extra_objects(distribution, mem_systems, parser.allocs_info, 1, process, ca_objs)

        if not args.disable_bw_aware:
            bw_aware_replacement(distribution, mem_systems, parser.allocs_info)

    write_result(args, distribution, mem_systems, useless)


def main():
    parser = argparse.ArgumentParser(description='hmem_advisor, a memory object distribution tool for heterogeneous memory systems')
    #parser.add_argument('mem_config', type=str)
    #parser.add_argument('accesses_loads', type=argparse.FileType('rU'))
    #parser.add_argument('sizes', type=argparse.FileType('rU'))
    parser.add_argument('--mem-config', type=str, required=True)
    parser.add_argument('--loads', type=argparse.FileType('rU'), required=True)
    parser.add_argument('--sizes', type=argparse.FileType('rU'), required=True)
    parser.add_argument('--stores', type=argparse.FileType('rU'))
    parser.add_argument('--worst', action='store_true', default=False)
    parser.add_argument('--algo', type=str, default='greedy')
    parser.add_argument('--metric', type=str, default='latencies', choices=('latencies','misses'))
    parser.add_argument('--page', type=str, required=False, default="4096b")
    parser.add_argument('--verbose', action='store_true', default=False)
    parser.add_argument('--rank', type=int, default=0)
    parser.add_argument('--rank-statistics', type=str, default="Total")
    parser.add_argument('--visualizer', action='store_true', default=False)
    parser.add_argument('--allocs-info')
    parser.add_argument('--num-ranks', type=int, default=0)
    parser.add_argument('--disable-bw-aware', action='store_true', default=False)
    parser.add_argument('--out', type=str)
    args = parser.parse_args()

    # Sanity checks
    if args.algo not in ("greedy", "precise") and not args.algo.isdigit():
        print("Algorithm", args.algo, "not supported")
        sys.exit(1)
    # TODO: is the following check necessary?
    #if args.algo.isdigit() and len(systems) > 2:
    #    print("Algorithm", args.algo, "only supported with 2 memory subsystems;", len(systems), "given")
    #    sys.exit(1)
    if not args.disable_bw_aware and not args.allocs_info:
        print('The bw-aware placement requires allocs-info data')
        sys.exit(1)
    if args.rank_statistics == 'Average' and not args.num_ranks:
        print('For --rank-statistics=Average you also have to specify --num-ranks')
        sys.exit(1)


    # launch core logic
    pipeline(args)


if __name__ == '__main__':
    main()

