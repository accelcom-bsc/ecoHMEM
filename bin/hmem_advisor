#! /usr/bin/python

# GPL licensed


import sys
import locale
import argparse

from misc.bw_aware import bw_aware_replacement
from misc.utils import text2bytes

from core.coreTypes import *
from core.parser import Parser, parseAllocInfoFile, parseTimeslotsInfoFile
from core.builder import Builder 
from core.engine import Engine, fit_extra_objects

locale.setlocale( locale.LC_ALL, 'en_US.UTF-8' )

def parseTimeslotsInfoFile(fname):
    with open(fname) as infile:
        data = json.load(infile)

    assert 'version' in data and data['version'] == 1

    field_idx = {}
    assert 'field_idx' not in data
    data['field_idx'] = field_idx
    for i,f in enumerate(data['fields']):
        field_idx[f] = i

    return data

def print_distribution(distribution, systems, bytes):
    for j in range(len(systems)):
        print("System: ",j, " Objects: ",len(distribution[j]))
        for item in distribution[j]:
            print("Id: ",item.id, " Loads: ",item.loads, " Stores: ",item.stores, " Cost:", item.value)
        print("Occupancy: ", bytes[j] * 100 / systems[j].realsize)


def main():
    parser = argparse.ArgumentParser(description='hmem_advisor, a memory object distribution tool for heterogeneous memory systems')
    #parser.add_argument('mem_config', type=str)
    #parser.add_argument('accesses_loads', type=argparse.FileType('rU'))
    #parser.add_argument('sizes', type=argparse.FileType('rU'))
    parser.add_argument('--mem-config', type=str, required=True)
    parser.add_argument('--loads', type=argparse.FileType('rU'), required=True)
    parser.add_argument('--sizes', type=argparse.FileType('rU'), required=True)
    parser.add_argument('--stores', type=argparse.FileType('rU'))
    parser.add_argument('--worst', action='store_true', default=False)
    parser.add_argument('--algo', type=str, default='greedy')
    parser.add_argument('--metric', type=str, default='latencies', choices=('latencies','misses'))
    parser.add_argument('--page', type=str, required=False, default="4096b")
    parser.add_argument('--verbose', action='store_true', default=False)
    parser.add_argument('--rank', type=int, default=0)
    parser.add_argument('--rank-statistics', type=str, default="Total")
    parser.add_argument('--visualizer', action='store_true', default=False)
    parser.add_argument('--allocs-info')
    parser.add_argument('--num-ranks', type=int)
    parser.add_argument('--disable-bw-aware', action='store_true', default=False)
    args = parser.parse_args()

    # Sanity checks
    if args.algo not in ("greedy", "precise") and not args.algo.isdigit():
        print("Algorithm", args.algo, "not supported")
        sys.exit(1)
    if args.algo.isdigit() and len(systems) > 2:
        print("Algorithm", args.algo, "only supported with 2 memory subsystems;", len(systems), "given")
        sys.exit(1)
    if not args.disable_bw_aware and not args.allocs_info:
        print('The bw-aware placement requires allocs-info data')
        sys.exit(1)
    if args.rank_statistics == 'Average' and not args.num_ranks:
        print('For --rank-statistics=Average you also have to specify --num-ranks')
        sys.exit(1)


    pagesize = text2bytes(args.page)
    
    parser = Parser(args)
    parser.parse()

    systems = parser.mem_systems

    Builder.pagesize = pagesize 
    objects, ignored, useless = Builder.build(parser.loads_raw_obj, parser.stores_raw_obj, parser.sizes_raw_obj)

    
    engine = Engine(objects, systems, args.algo, args.metric, args.worst)
    distribution = engine.execute()


    if args.allocs_info:
        allocs_info = parseAllocInfoFile(args.allocs_info)
        process = 10
        ca_objs = None
        fit_extra_objects(distribution, systems, allocs_info, 1, process, ca_objs)

        if not args.disable_bw_aware:
            bw_aware_replacement(distribution, systems, allocs_info)


    # print output
    for i in range(len(systems)):
        size = 0
        if args.verbose:
            print("--", systems[i].name, "-", systems[i].realsize, "bytes --")

        if not args.verbose and not args.visualizer:
            print("# Memory configuration for", systems[i].name, "with size", systems[i].realsize, "bytes")
            # print("# Memory configuration for", systems[i].name, "with size", systems[i].realsize, "bytes and latency", dram.load_latency/systems[i].load_latency, "times faster than DRAM")

        for mo in distribution[i]:
            if not args.verbose:
                if args.visualizer:
                    print(mo.callstack + ';' + str(mo.realsize) + ';' + str(mo.loads))
                else:
                    print(mo.comment() + mo.callstack + " @ " + systems[i].allocator)
            elif args.stores:
                print(mo.callstack, "-", mo.loads, "loads -", mo.stores, "stores -", mo.realsize, "bytes", " - cost ", str(mo.value))
            else:
                print(mo.callstack, "-", mo.loads, "loads -", mo.realsize, "bytes", " - cost ", str(mo.value))
            size += mo.realsize
        if args.verbose:
            print("--")
            if not args.stores:
                print(len(distribution[i]), "objects;", size, "bytes (" + str(size*100./systems[i].realsize) + "%);")
            else:
                print(len(distribution[i]), "objects;", size, "bytes (" + str(size*100./systems[i].realsize) + "%);")
            print


    if not args.verbose: sys.exit(0)

    print("-- WHEREVER --")
    size = 0
    for mo in useless:
        if args.stores:
            print(mo.callstack, "-", mo.loads, "loads -", mo.stores, "stores -", mo.realsize, "bytes")
        else:
            print(mo.callstack, "-", mo.loads, "loads -", mo.realsize, "bytes")
        size += mo.realsize
    print("--")
    print(len(useless), "objects;", size, "bytes")


if __name__ == '__main__':
    main()

